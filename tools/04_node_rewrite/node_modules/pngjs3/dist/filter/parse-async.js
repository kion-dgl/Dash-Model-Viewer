'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _chunkstream = require('../chunkstream');

var _chunkstream2 = _interopRequireDefault(_chunkstream);

var _parse = require('./parse');

var _parse2 = _interopRequireDefault(_parse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FilterAsync = function (_ChunkStream) {
  _inherits(FilterAsync, _ChunkStream);

  function FilterAsync(bitmapInfo) {
    _classCallCheck(this, FilterAsync);

    var _this = _possibleConstructorReturn(this, (FilterAsync.__proto__ || Object.getPrototypeOf(FilterAsync)).call(this));

    var buffers = [];
    var that = _this;
    _this._filter = new _parse2.default(bitmapInfo, {
      read: _this.read.bind(_this),
      write: function write(buffer) {
        buffers.push(buffer);
      },
      complete: function complete() {
        that.emit('complete', Buffer.concat(buffers));
      }
    });

    _this._filter.start();
    return _this;
  }

  return FilterAsync;
}(_chunkstream2.default);

exports.default = FilterAsync;