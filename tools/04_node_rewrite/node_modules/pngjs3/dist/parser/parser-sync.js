'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (buffer) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!hasSyncZlib) {
    throw new Error('To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0');
  }

  var err = void 0;
  function handleError(_err_) {
    err = _err_;
  }

  var metaData = void 0;
  function handleMetaData(_metaData_) {
    metaData = _metaData_;
  }

  function handleTransColor(transColor) {
    metaData.transColor = transColor;
  }

  function handlePalette(palette) {
    metaData.palette = palette;
  }

  var gamma = void 0;
  function handleGamma(_gamma_) {
    gamma = _gamma_;
  }

  var inflateDataList = [];
  function handleInflateData(inflatedData) {
    inflateDataList.push(inflatedData);
  }

  var reader = new _syncReader2.default(buffer);

  var parser = new _parser.Parser(options, {
    read: reader.read.bind(reader),
    error: handleError,
    metadata: handleMetaData,
    gamma: handleGamma,
    palette: handlePalette,
    transColor: handleTransColor,
    inflateData: handleInflateData
  });

  parser.start();
  reader.process();

  if (err) {
    throw err;
  }

  //join together the inflate datas
  var inflateData = Buffer.concat(inflateDataList);
  inflateDataList.length = 0;

  var inflatedData = void 0;
  if (metaData.interlace) {
    inflatedData = _zlib2.default.inflateSync(inflateData);
  } else {
    var rowSize = (metaData.width * metaData.bpp * metaData.depth + 7 >> 3) + 1;
    var imageSize = rowSize * metaData.height;
    inflatedData = (0, _syncInflate2.default)(inflateData, { chunkSize: imageSize, maxLength: imageSize });
  }
  inflateData = null;

  if (!inflatedData || !inflatedData.length) {
    throw new Error('bad png - invalid inflate data response');
  }

  var unfilteredData = (0, _filter.parseSync)(inflatedData, metaData);
  inflateData = null;

  var bitmapData = (0, _dataToBitMap2.default)(unfilteredData, metaData);
  unfilteredData = null;

  var normalisedBitmapData = (0, _formatNormaliser2.default)(bitmapData, metaData, options.skipRescale);

  metaData.data = normalisedBitmapData;
  metaData.gamma = gamma || 0;

  return metaData;
};

var _zlib = require('zlib');

var _zlib2 = _interopRequireDefault(_zlib);

var _syncInflate = require('../sync-inflate');

var _syncInflate2 = _interopRequireDefault(_syncInflate);

var _syncReader = require('../sync-reader');

var _syncReader2 = _interopRequireDefault(_syncReader);

var _filter = require('../filter');

var _dataToBitMap = require('../dataToBitMap');

var _dataToBitMap2 = _interopRequireDefault(_dataToBitMap);

var _formatNormaliser = require('../format-normaliser');

var _formatNormaliser2 = _interopRequireDefault(_formatNormaliser);

var _parser = require('../parser');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable max-statements */
var hasSyncZlib = true;