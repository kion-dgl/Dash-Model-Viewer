'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Inflate = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.createInflate = createInflate;
exports.zlibBufferSync = zlibBufferSync;
exports.default = inflateSync;

var _assert = require('assert');

var _zlib = require('zlib');

var _zlib2 = _interopRequireDefault(_zlib);

var _buffer = require('buffer');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Inflate = exports.Inflate = function (_zlib$Inflate) {
  _inherits(Inflate, _zlib$Inflate);

  function Inflate(opts) {
    _classCallCheck(this, Inflate);

    var _this = _possibleConstructorReturn(this, (Inflate.__proto__ || Object.getPrototypeOf(Inflate)).call(this));

    if (!(_this instanceof Inflate)) {
      var _ret;

      return _ret = new Inflate(opts), _possibleConstructorReturn(_this, _ret);
    }

    if (opts && opts.chunkSize < _zlib2.default.Z_MIN_CHUNK) {
      opts.chunkSize = _zlib2.default.Z_MIN_CHUNK;
    }

    _zlib2.default.Inflate.call(_this, opts);

    if (opts && opts.maxLength) {
      _this._maxLength = opts.maxLength;
    }
    return _this;
  }

  _createClass(Inflate, [{
    key: '_close',
    value: function _close(callback) {
      if (callback) {
        process.nextTick(callback);
      }

      // Caller may invoke .close after a zlib error (which will null _handle).
      if (!this._handle) {
        return;
      }

      this._handle.close();
      this._handle = null;
    }
  }, {
    key: '_processChunk',
    value: function _processChunk(chunk, flushFlag, asyncCb) {
      if (typeof asyncCb === 'function') {
        return _zlib2.default.Inflate._processChunk.call(this, chunk, flushFlag, asyncCb);
      }

      var self = this;

      var availInBefore = chunk && chunk.length;
      var availOutBefore = this._chunkSize - this._offset;
      var leftToInflate = this._maxLength;
      var inOff = 0;

      var buffers = [];
      var nread = 0;

      var error;
      this.on('error', function (err) {
        error = err;
      });

      function handleChunk(availInAfter, availOutAfter) {
        if (self._hadError) {
          return;
        }

        var have = availOutBefore - availOutAfter;
        (0, _assert.ok)(have >= 0, 'have should not go down');

        if (have > 0) {
          var out = self._buffer.slice(self._offset, self._offset + have);
          self._offset += have;

          if (out.length > leftToInflate) {
            out = out.slice(0, leftToInflate);
          }

          buffers.push(out);
          nread += out.length;
          leftToInflate -= out.length;

          if (leftToInflate === 0) {
            return false;
          }
        }

        if (availOutAfter === 0 || self._offset >= self._chunkSize) {
          availOutBefore = self._chunkSize;
          self._offset = 0;
          self._buffer = Buffer.allocUnsafe(self._chunkSize);
        }

        if (availOutAfter === 0) {
          inOff += availInBefore - availInAfter;
          availInBefore = availInAfter;

          return true;
        }

        return false;
      }

      (0, _assert.ok)(this._handle, 'zlib binding closed');
      do {
        var res = this._handle.writeSync(flushFlag, chunk, // in
        inOff, // in_off
        availInBefore, // in_len
        this._buffer, // out
        this._offset, //out_off
        availOutBefore // out_len
        );
      } while (!this._hadError && handleChunk(res[0], res[1]));

      if (this._hadError) {
        throw error;
      }

      if (nread >= _buffer.kMaxLength) {
        this._close();
        throw new RangeError('Cannot create final Buffer. It would be larger than 0x' + _buffer.kMaxLength.toString(16) + ' bytes');
      }

      var buf = Buffer.concat(buffers, nread);
      this._close();

      return buf;
    }
  }]);

  return Inflate;
}(_zlib2.default.Inflate);

function createInflate(opts) {
  return new Inflate(opts);
}

function zlibBufferSync(engine, buffer) {
  if (typeof buffer === 'string') {
    // eslint-disable-next-line
    buffer = Buffer.from(buffer);
  }
  if (!(buffer instanceof Buffer)) {
    throw new TypeError('Not a string or buffer');
  }

  var flushFlag = engine._finishFlushFlag || _zlib2.default.Z_FINISH;

  return engine._processChunk(buffer, flushFlag);
}

function inflateSync(buffer, opts) {
  return zlibBufferSync(new Inflate(opts), buffer);
}