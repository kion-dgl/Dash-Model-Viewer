'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require('../constants');

var _constants2 = _interopRequireDefault(_constants);

var _crc = require('../crc');

var _crc2 = _interopRequireDefault(_crc);

var _bitpacker = require('../bitpacker');

var _bitpacker2 = _interopRequireDefault(_bitpacker);

var _filter = require('../filter');

var _zlib = require('zlib');

var _zlib2 = _interopRequireDefault(_zlib);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Packer = function () {
  function Packer(options) {
    _classCallCheck(this, Packer);

    this._options = options;

    options.deflateChunkSize = options.deflateChunkSize || 32 * 1024;
    options.deflateLevel = options.deflateLevel ? options.deflateLevel : 9;
    options.deflateStrategy = options.deflateStrategy ? options.deflateStrategy : 3;
    options.inputHasAlpha = options.inputHasAlpha ? options.inputHasAlpha : true;
    options.deflateFactory = options.deflateFactory || _zlib2.default.createDeflate;
    options.bitDepth = options.bitDepth || 8;
    // This is outputColorType
    options.colorType = typeof options.colorType === 'number' ? options.colorType : _constants2.default.COLORTYPE_COLOR_ALPHA;
    options.inputColorType = typeof options.inputColorType === 'number' ? options.inputColorType : _constants2.default.COLORTYPE_COLOR_ALPHA;

    if ([_constants2.default.COLORTYPE_GRAYSCALE, _constants2.default.COLORTYPE_COLOR, _constants2.default.COLORTYPE_COLOR_ALPHA, _constants2.default.COLORTYPE_ALPHA].indexOf(options.colorType) === -1) {
      throw new Error('option color type:' + options.colorType + ' is not supported at present');
    }
    if ([_constants2.default.COLORTYPE_GRAYSCALE, _constants2.default.COLORTYPE_COLOR, _constants2.default.COLORTYPE_COLOR_ALPHA, _constants2.default.COLORTYPE_ALPHA].indexOf(options.inputColorType) === -1) {
      throw new Error('option input color type:' + options.inputColorType + ' is not supported at present');
    }
    if (options.bitDepth !== 8 && options.bitDepth !== 16) {
      throw new Error('option bit depth:' + options.bitDepth + ' is not supported at present');
    }
  }

  _createClass(Packer, [{
    key: 'getDeflateOptions',
    value: function getDeflateOptions() {
      return {
        chunkSize: this._options.deflateChunkSize,
        level: this._options.deflateLevel,
        strategy: this._options.deflateStrategy
      };
    }
  }, {
    key: 'createDeflate',
    value: function createDeflate() {
      return this._options.deflateFactory(this.getDeflateOptions());
    }
  }, {
    key: 'filterData',
    value: function filterData(data, width, height) {
      // convert to correct format for filtering (e.g. right bpp and bit depth)
      var packedData = (0, _bitpacker2.default)(data, width, height, this._options);

      // filter pixel data
      var bpp = _constants2.default.COLORTYPE_TO_BPP_MAP[this._options.colorType];
      var filteredData = (0, _filter.Pack)(packedData, width, height, this._options, bpp);
      return filteredData;
    }
  }, {
    key: '_packChunk',
    value: function _packChunk(type, data) {

      var len = data ? data.length : 0;
      var buf = new Buffer(len + 12);

      buf.writeUInt32BE(len, 0);
      buf.writeUInt32BE(type, 4);

      if (data) {
        data.copy(buf, 8);
      }

      buf.writeInt32BE(_crc2.default.crc32(buf.slice(4, buf.length - 4)), buf.length - 4);
      return buf;
    }
  }, {
    key: 'packGAMA',
    value: function packGAMA(gamma) {
      var buf = new Buffer(4);
      buf.writeUInt32BE(Math.floor(gamma * _constants2.default.GAMMA_DIVISION), 0);
      return this._packChunk(_constants2.default.TYPE_gAMA, buf);
    }
  }, {
    key: 'packIHDR',
    value: function packIHDR(width, height) {

      var buf = new Buffer(13);
      buf.writeUInt32BE(width, 0);
      buf.writeUInt32BE(height, 4);
      buf[8] = this._options.bitDepth; // Bit depth
      buf[9] = this._options.colorType; // colorType
      buf[10] = 0; // compression
      buf[11] = 0; // filter
      buf[12] = 0; // interlace

      return this._packChunk(_constants2.default.TYPE_IHDR, buf);
    }
  }, {
    key: 'packIDAT',
    value: function packIDAT(data) {
      return this._packChunk(_constants2.default.TYPE_IDAT, data);
    }
  }, {
    key: 'packIEND',
    value: function packIEND() {
      return this._packChunk(_constants2.default.TYPE_IEND, null);
    }
  }]);

  return Packer;
}();

exports.default = Packer;