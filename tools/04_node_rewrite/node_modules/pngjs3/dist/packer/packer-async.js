'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _stream = require('stream');

var _stream2 = _interopRequireDefault(_stream);

var _constants = require('../constants');

var _constants2 = _interopRequireDefault(_constants);

var _packer = require('./packer');

var _packer2 = _interopRequireDefault(_packer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PackerAsync = function (_Stream) {
  _inherits(PackerAsync, _Stream);

  function PackerAsync(opt) {
    _classCallCheck(this, PackerAsync);

    var _this = _possibleConstructorReturn(this, (PackerAsync.__proto__ || Object.getPrototypeOf(PackerAsync)).call(this));

    var options = opt || {};

    _this._packer = new _packer2.default(options);
    // create deflater
    _this._deflate = _this._packer.createDeflate();

    _this.readable = true;
    return _this;
  }

  _createClass(PackerAsync, [{
    key: 'pack',
    value: function pack(data, width, height, gamma) {
      // Signature
      this.emit('data', new Buffer(_constants2.default.PNG_SIGNATURE));
      this.emit('data', this._packer.packIHDR(width, height));

      if (gamma) {
        this.emit('data', this._packer.packGAMA(gamma));
      }

      var filteredData = this._packer.filterData(data, width, height);
      this.deflate(filteredData);
    }
  }, {
    key: 'deflate',
    value: function deflate(filteredData) {
      // Bind this error to the deflater
      this._deflate.on('error', this.emit.bind(this, 'error'));

      this._deflate.on('data', function (compressedData) {
        this.emit('data', this._packer.packIDAT(compressedData));
      }.bind(this));

      this._deflate.on('end', function () {
        this.emit('data', this._packer.packIEND());
        this.emit('end');
      }.bind(this));

      this._deflate.end(filteredData);
    }
  }]);

  return PackerAsync;
}(_stream2.default);

exports.default = PackerAsync;